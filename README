sigly - event/delegate (signal/slot) mechanism implementation for C++

    https://bitbucket.org/anhero/sigly

Library is written in C++03 and does not use C++0x features.

To use the library, add the 'include' subdirectory to the list of the system include directories or
to your project.

You can specify which multi-thread policy you want by defining a macro before including sigly or
by defining it directly in the define.h file. The macros are described in the following quick
documentation.

Originally written by Sarah Thompson (sarah@telergy.com) 2002.

QUICK DOCUMENTATION

				(see also the full documentation at http://sigslot.sourceforge.net/)

		#define switches
			SIGLY_PURE_ISO				- Define this to force ISO C++ compliance. This also disables
										  all of the thread safety support on platforms where it is
										  available.

			SIGLY_USE_POSIX_THREADS		- Force use of Posix threads when using a C++ compiler other than
										  gcc on a platform that supports Posix threads. (When using gcc,
										  this is the default - use SIGLY_PURE_ISO to disable this if
										  necessary)

			SIGLY_DEFAULT_MT_POLICY		- Where thread support is enabled, this defaults to MultiThreadedGlobal.
										  Otherwise, the default is SingleThreaded. #define this yourself to
										  override the default. In pure ISO mode, anything other than
										  SingleThreaded will cause a compiler error.

		PLATFORM NOTES

			Win32						- On Win32, the WIN32 symbol must be #defined. Most mainstream
										  compilers do this by default, but you may need to define it
										  yourself if your build environment is less standard. This causes
										  the Win32 thread support to be compiled in and used automatically.

			Unix/Linux/BSD, etc.		- If you're using gcc, it is assumed that you have Posix threads
										  available, so they are used automatically. You can override this
										  (as under Windows) with the SIGLY_PURE_ISO switch. If you're using
										  something other than gcc but still want to use Posix threads, you
										  need to #define SIGLY_USE_POSIX_THREADS.

			ISO C++						- If none of the supported platforms are detected, or if
										  SIGLY_PURE_ISO is defined, all multithreading support is turned off,
										  along with any code that might cause a pure ISO C++ environment to
										  complain. Before you ask, gcc -ansi -pedantic won't compile this
										  library, but gcc -ansi is fine. Pedantic mode seems to throw a lot of
										  errors that aren't really there. If you feel like investigating this,
										  please contact the author.


		THREADING MODES

			SingleThreaded				- Your program is assumed to be single threaded from the point of view
										  of signal/slot usage (i.e. all objects using signals and slots are
										  created and destroyed from a single thread). Behaviour if objects are
										  destroyed concurrently is undefined (i.e. you'll get the occasional
										  segmentation fault/memory exception).

			MultiThreadedGlobal			- Your program is assumed to be multi threaded. Objects using signals and
										  slots can be safely created and destroyed from any thread, even when
										  connections exist. In MultiThreadedGlobal mode, this is achieved by a
										  single global mutex (actually a critical section on Windows because they
										  are faster). This option uses less OS resources, but results in more
										  opportunities for contention, possibly resulting in more context switches
										  than are strictly necessary.

			MultiThreadedLocal			- Behaviour in this mode is essentially the same as MultiThreadedGlobal,
										  except that each signal, and each object that inherits HasSlots, all
										  have their own mutex/critical section. In practice, this means that
										  mutex collisions (and hence context switches) only happen if they are
										  absolutely essential. However, on some platforms, creating a lot of
										  mutexes can slow down the whole OS, so use this option with care.
